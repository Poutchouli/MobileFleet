# docker-compose.prod.yml
# PRODUCTION CONFIGURATION - PRESERVES EXISTING DATABASE
# This file defines production services that maintain existing database data.
# Use this when you want to keep your current database intact.

services:
  # --- The Flask Web Application Service ---
  web:
    # Build the image from the Dockerfile in the current directory.
    build: .
    # Name the container for easier identification.
    container_name: fleet_web_prod
    # Production command - skips database initialization
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        timeout=60;
        while [ $$timeout -gt 0 ]; do
          if pg_isready -h db -p 5432 -U postgres -d fleet_db >/dev/null 2>&1; then
            break;
          fi;
          timeout=$$((timeout - 1));
          if [ $$timeout -le 0 ]; then
            echo 'Timeout waiting for PostgreSQL';
            exit 1;
          fi;
          echo 'Waiting for PostgreSQL... ($$timeout seconds left)';
          sleep 1;
        done;
        echo 'PostgreSQL is ready.' &&
        sleep 2 &&
        echo 'Skipping database initialization (production mode)...' &&
        echo 'Starting web server...' &&
        gunicorn --bind 0.0.0.0:5000 --timeout 300 --workers 4 --worker-class sync --preload app:app
      "
    # Map port 5000 inside the container to port 5000 on the host machine.
    ports:
      - "5000:5000"
    # In production, we don't mount the code volume for security
    # volumes:
    #   - .:/app  # Commented out for production
    # Define environment variables for the web service.
    environment:
      # The DATABASE_URL points to the 'db' service.
      - DATABASE_URL=dbname=fleet_db user=postgres password=password host=db
      # SQLAlchemy compatible URL
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:password@db:5432/fleet_db
      # Flask environment settings for production.
      - FLASK_ENV=production
      - FLASK_DEBUG=False
    # This service depends on the 'db' service.
    depends_on:
      - db

  # --- The PostgreSQL Database Service ---
  db:
    # Use the official PostgreSQL image from Docker Hub.
    image: postgres:14-alpine
    # Name the container.
    container_name: fleet_db_prod
    # Define environment variables for the PostgreSQL container.
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=fleet_db
    # Mount a volume to persist database data.
    # Using a different volume name for production to avoid conflicts
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    # Map port 5432 in the container to 5434 on the host (different from dev).
    ports:
      - "5434:5432"
    # Restart policy for production stability
    restart: unless-stopped

# --- Named Volumes ---
# Define the named volume for persistent database storage.
volumes:
  postgres_data_prod:
    # Production volume - will persist data between container restarts
